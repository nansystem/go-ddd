#!/bin/bash

# コミット対象のファイルのみを取得
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$')

if [[ "$STAGED_GO_FILES" = "" ]]; then
  exit 0
fi

PASS=true

# フォーマットチェック & goimports の実行
# gofmt と goimports をまとめて実行し、ステージングも1回にする
echo "Running gofmt & goimports..."
FORMATTED_FILES=""
for FILE in $STAGED_GO_FILES
do
  # gofmt でフォーマットチェック (-l) と修正 (-w)
  gofmt -l -w "$FILE"
  if [ $? -ne 0 ]; then
    echo "gofmt failed on $FILE"
    PASS=false
  fi
  # goimports で import 文の整理とフォーマット修正 (-w)
  # gofmt で既にフォーマットされている可能性もあるが、import 整理のために実行
  go tool goimports -local github.com/nansystem/go-ddd -w "$FILE"
  if [ $? -ne 0 ]; then
    echo "goimports failed on $FILE"
    PASS=false
  fi
  # フォーマット/import修正されたファイルを記録
  if git diff --quiet "$FILE"; then
      : # ファイルに変更がない場合は何もしない
  else
      FORMATTED_FILES="$FORMATTED_FILES $FILE"
  fi
done

# フォーマット/import修正されたファイルがあればステージング
if [ -n "$FORMATTED_FILES" ]; then
    echo "Adding formatted files to staging: $FORMATTED_FILES"
    git add $FORMATTED_FILES
fi


# golangci-lint の実行
# ステージされたファイルがある場合のみプロジェクト全体をlintする
# 個別ファイル指定だとディレクトリ跨ぎでエラーになるため ./... を指定
echo "Running golangci-lint..."
if [ -n "$STAGED_GO_FILES" ]; then
  golangci-lint run ./...
  if [ $? -ne 0 ]; then
    echo "golangci-lint failed"
    PASS=false
  fi
fi

if ! $PASS; then
  echo "Linting or formatting failed, please fix the errors and try again"
  exit 1
fi

exit 0
