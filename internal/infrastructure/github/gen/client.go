// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gen

import (
	"context"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type GithubGraphQLClient interface {
	GetRepository(ctx context.Context, owner string, name string, interceptors ...clientv2.RequestInterceptor) (*GetRepository, error)
	GetViewer(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetViewer, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) GithubGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type GetRepository_Repository_Issues_Nodes_Author struct {
	Login string "json:\"login\" graphql:\"login\""
}

func (t *GetRepository_Repository_Issues_Nodes_Author) GetLogin() string {
	if t == nil {
		t = &GetRepository_Repository_Issues_Nodes_Author{}
	}
	return t.Login
}

type GetRepository_Repository_Issues_Nodes struct {
	Author    *GetRepository_Repository_Issues_Nodes_Author "json:\"author,omitempty\" graphql:\"author\""
	CreatedAt string                                        "json:\"createdAt\" graphql:\"createdAt\""
	ID        string                                        "json:\"id\" graphql:\"id\""
	Title     string                                        "json:\"title\" graphql:\"title\""
	URL       string                                        "json:\"url\" graphql:\"url\""
}

func (t *GetRepository_Repository_Issues_Nodes) GetAuthor() *GetRepository_Repository_Issues_Nodes_Author {
	if t == nil {
		t = &GetRepository_Repository_Issues_Nodes{}
	}
	return t.Author
}
func (t *GetRepository_Repository_Issues_Nodes) GetCreatedAt() string {
	if t == nil {
		t = &GetRepository_Repository_Issues_Nodes{}
	}
	return t.CreatedAt
}
func (t *GetRepository_Repository_Issues_Nodes) GetID() string {
	if t == nil {
		t = &GetRepository_Repository_Issues_Nodes{}
	}
	return t.ID
}
func (t *GetRepository_Repository_Issues_Nodes) GetTitle() string {
	if t == nil {
		t = &GetRepository_Repository_Issues_Nodes{}
	}
	return t.Title
}
func (t *GetRepository_Repository_Issues_Nodes) GetURL() string {
	if t == nil {
		t = &GetRepository_Repository_Issues_Nodes{}
	}
	return t.URL
}

type GetRepository_Repository_Issues struct {
	Nodes      []*GetRepository_Repository_Issues_Nodes "json:\"nodes,omitempty\" graphql:\"nodes\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetRepository_Repository_Issues) GetNodes() []*GetRepository_Repository_Issues_Nodes {
	if t == nil {
		t = &GetRepository_Repository_Issues{}
	}
	return t.Nodes
}
func (t *GetRepository_Repository_Issues) GetTotalCount() int64 {
	if t == nil {
		t = &GetRepository_Repository_Issues{}
	}
	return t.TotalCount
}

type GetRepository_Repository_PullRequests_Nodes_Author struct {
	Login string "json:\"login\" graphql:\"login\""
}

func (t *GetRepository_Repository_PullRequests_Nodes_Author) GetLogin() string {
	if t == nil {
		t = &GetRepository_Repository_PullRequests_Nodes_Author{}
	}
	return t.Login
}

type GetRepository_Repository_PullRequests_Nodes struct {
	Author    *GetRepository_Repository_PullRequests_Nodes_Author "json:\"author,omitempty\" graphql:\"author\""
	CreatedAt string                                              "json:\"createdAt\" graphql:\"createdAt\""
	ID        string                                              "json:\"id\" graphql:\"id\""
	Title     string                                              "json:\"title\" graphql:\"title\""
	URL       string                                              "json:\"url\" graphql:\"url\""
}

func (t *GetRepository_Repository_PullRequests_Nodes) GetAuthor() *GetRepository_Repository_PullRequests_Nodes_Author {
	if t == nil {
		t = &GetRepository_Repository_PullRequests_Nodes{}
	}
	return t.Author
}
func (t *GetRepository_Repository_PullRequests_Nodes) GetCreatedAt() string {
	if t == nil {
		t = &GetRepository_Repository_PullRequests_Nodes{}
	}
	return t.CreatedAt
}
func (t *GetRepository_Repository_PullRequests_Nodes) GetID() string {
	if t == nil {
		t = &GetRepository_Repository_PullRequests_Nodes{}
	}
	return t.ID
}
func (t *GetRepository_Repository_PullRequests_Nodes) GetTitle() string {
	if t == nil {
		t = &GetRepository_Repository_PullRequests_Nodes{}
	}
	return t.Title
}
func (t *GetRepository_Repository_PullRequests_Nodes) GetURL() string {
	if t == nil {
		t = &GetRepository_Repository_PullRequests_Nodes{}
	}
	return t.URL
}

type GetRepository_Repository_PullRequests struct {
	Nodes      []*GetRepository_Repository_PullRequests_Nodes "json:\"nodes,omitempty\" graphql:\"nodes\""
	TotalCount int64                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetRepository_Repository_PullRequests) GetNodes() []*GetRepository_Repository_PullRequests_Nodes {
	if t == nil {
		t = &GetRepository_Repository_PullRequests{}
	}
	return t.Nodes
}
func (t *GetRepository_Repository_PullRequests) GetTotalCount() int64 {
	if t == nil {
		t = &GetRepository_Repository_PullRequests{}
	}
	return t.TotalCount
}

type GetRepository_Repository struct {
	Description    *string                               "json:\"description,omitempty\" graphql:\"description\""
	ForkCount      int64                                 "json:\"forkCount\" graphql:\"forkCount\""
	ID             string                                "json:\"id\" graphql:\"id\""
	Issues         GetRepository_Repository_Issues       "json:\"issues\" graphql:\"issues\""
	Name           string                                "json:\"name\" graphql:\"name\""
	PullRequests   GetRepository_Repository_PullRequests "json:\"pullRequests\" graphql:\"pullRequests\""
	StargazerCount int64                                 "json:\"stargazerCount\" graphql:\"stargazerCount\""
	URL            string                                "json:\"url\" graphql:\"url\""
}

func (t *GetRepository_Repository) GetDescription() *string {
	if t == nil {
		t = &GetRepository_Repository{}
	}
	return t.Description
}
func (t *GetRepository_Repository) GetForkCount() int64 {
	if t == nil {
		t = &GetRepository_Repository{}
	}
	return t.ForkCount
}
func (t *GetRepository_Repository) GetID() string {
	if t == nil {
		t = &GetRepository_Repository{}
	}
	return t.ID
}
func (t *GetRepository_Repository) GetIssues() *GetRepository_Repository_Issues {
	if t == nil {
		t = &GetRepository_Repository{}
	}
	return &t.Issues
}
func (t *GetRepository_Repository) GetName() string {
	if t == nil {
		t = &GetRepository_Repository{}
	}
	return t.Name
}
func (t *GetRepository_Repository) GetPullRequests() *GetRepository_Repository_PullRequests {
	if t == nil {
		t = &GetRepository_Repository{}
	}
	return &t.PullRequests
}
func (t *GetRepository_Repository) GetStargazerCount() int64 {
	if t == nil {
		t = &GetRepository_Repository{}
	}
	return t.StargazerCount
}
func (t *GetRepository_Repository) GetURL() string {
	if t == nil {
		t = &GetRepository_Repository{}
	}
	return t.URL
}

type GetViewer_Viewer struct {
	Login string "json:\"login\" graphql:\"login\""
}

func (t *GetViewer_Viewer) GetLogin() string {
	if t == nil {
		t = &GetViewer_Viewer{}
	}
	return t.Login
}

type GetRepository struct {
	Repository *GetRepository_Repository "json:\"repository,omitempty\" graphql:\"repository\""
}

func (t *GetRepository) GetRepository() *GetRepository_Repository {
	if t == nil {
		t = &GetRepository{}
	}
	return t.Repository
}

type GetViewer struct {
	Viewer GetViewer_Viewer "json:\"viewer\" graphql:\"viewer\""
}

func (t *GetViewer) GetViewer() *GetViewer_Viewer {
	if t == nil {
		t = &GetViewer{}
	}
	return &t.Viewer
}

const GetRepositoryDocument = `query GetRepository ($owner: String!, $name: String!) {
	repository(owner: $owner, name: $name) {
		id
		name
		url
		description
		stargazerCount
		forkCount
		issues(first: 10, states: OPEN) {
			totalCount
			nodes {
				id
				title
				url
				createdAt
				author {
					login
				}
			}
		}
		pullRequests(first: 10, states: OPEN) {
			totalCount
			nodes {
				id
				title
				url
				createdAt
				author {
					login
				}
			}
		}
	}
}
`

func (c *Client) GetRepository(ctx context.Context, owner string, name string, interceptors ...clientv2.RequestInterceptor) (*GetRepository, error) {
	vars := map[string]any{
		"owner": owner,
		"name":  name,
	}

	var res GetRepository
	if err := c.Client.Post(ctx, "GetRepository", GetRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetViewerDocument = `query GetViewer {
	viewer {
		login
	}
}
`

func (c *Client) GetViewer(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetViewer, error) {
	vars := map[string]any{}

	var res GetViewer
	if err := c.Client.Post(ctx, "GetViewer", GetViewerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetRepositoryDocument: "GetRepository",
	GetViewerDocument:     "GetViewer",
}
