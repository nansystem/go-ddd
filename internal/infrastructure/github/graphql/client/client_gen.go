// Code generated by gqlgenc, DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/nansystem/go-ddd/internal/infrastructure/github/graphql/model"
)

const (
	viewerQuery = `query GetViewer { viewer { login } }`
	repoQuery   = `query GetRepository($owner: String!, $name: String!) {
		viewer { login }
		repository(owner: $owner, name: $name) {
			id name url description stargazerCount forkCount
			issues(first: 10, states: OPEN) { 
				totalCount 
				nodes { id title url createdAt author { login } } 
			}
			pullRequests(first: 10, states: OPEN) { 
				totalCount 
				nodes { id title url createdAt author { login } } 
			}
		}
	}`
)

type Client struct {
	httpClient *http.Client
	endpoint   string
}

func NewClient(client *http.Client, endpoint string) *Client {
	return &Client{
		httpClient: client,
		endpoint:   endpoint,
	}
}

type graphqlResponse struct {
	Data   json.RawMessage `json:"data"`
	Errors []struct {
		Message string `json:"message"`
	} `json:"errors"`
}

func (c *Client) request(ctx context.Context, query string, variables map[string]interface{}, response interface{}) error {
	reqBody, err := json.Marshal(map[string]interface{}{
		"query":     query,
		"variables": variables,
	})
	if err != nil {
		return fmt.Errorf("marshaling request: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", c.endpoint, bytes.NewBuffer(reqBody))
	if err != nil {
		return fmt.Errorf("creating request: %w", err)
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("executing request: %w", err)
	}
	defer resp.Body.Close()

	var graphqlResp graphqlResponse
	if err := json.NewDecoder(resp.Body).Decode(&graphqlResp); err != nil {
		return fmt.Errorf("decoding response: %w", err)
	}

	if len(graphqlResp.Errors) > 0 {
		return fmt.Errorf("graphql error: %s", graphqlResp.Errors[0].Message)
	}

	if err := json.Unmarshal(graphqlResp.Data, response); err != nil {
		return fmt.Errorf("unmarshaling data: %w", err)
	}

	return nil
}

func (c *Client) GetViewer(ctx context.Context) (*model.GetViewerResponse, error) {
	resp := &model.GetViewerResponse{}
	if err := c.request(ctx, viewerQuery, map[string]interface{}{}, resp); err != nil {
		return nil, fmt.Errorf("getting viewer: %w", err)
	}
	return resp, nil
}

func (c *Client) GetRepository(ctx context.Context, owner, name string) (*model.GetRepositoryResponse, error) {
	variables := map[string]interface{}{
		"owner": owner,
		"name":  name,
	}
	resp := &model.GetRepositoryResponse{}
	if err := c.request(ctx, repoQuery, variables, resp); err != nil {
		return nil, fmt.Errorf("getting repository: %w", err)
	}
	return resp, nil
}
